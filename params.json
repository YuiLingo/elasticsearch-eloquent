{
  "name": "Elasticsearch Eloquent",
  "tagline": "Elasticsearch functionality like Laravel Eloquent models",
  "body": "# Persimmon / Elasticsearch Eloquent (Beta)\r\n\r\n[![Latest Version on Packagist][ico-version]][link-packagist]\r\n[![Software License][ico-license]](LICENSE.md)\r\n[![Build Status][ico-travis]][link-travis]\r\n[![Coverage Status][ico-scrutinizer]][link-scrutinizer]\r\n[![Quality Score][ico-code-quality]][link-code-quality]\r\n[![Total Downloads][ico-downloads]][link-downloads]\r\n\r\nTBD.\r\n\r\n## Install\r\n\r\nVia Composer\r\n\r\n``` bash\r\n$ composer require isswp101/elasticsearch-eloquent\r\n```\r\n\r\n## Usage\r\n\r\n### Create a new model\r\n\r\nYou must specify static `index` and `type` variables to determine the document path.\r\n\r\n```php\r\nuse Isswp101\\Persimmon\\ElasticsearchModel;\r\n\r\nclass Product extends ElasticsearchModel\r\n{\r\n    protected static $index = 'test';\r\n    protected static $type = 'test';\r\n\r\n    public $name;\r\n    public $price = 0;\r\n}\r\n```\r\n\r\nHere `name` and `price` are fields which will be stored in Elasticsearch.  \r\nUse the static `create()` method to create document in Elasticsearch:\r\n\r\n```php\r\n$product = Product::create(['id' => 3, 'name' => 'Product 3', 'price' => 30]);\r\n```\r\n\r\n### Save the model\r\n\r\n```php\r\n$product = new Product();\r\n$product->id = 1;\r\n$product->name = 'Product 1';\r\n$product->price = 20;\r\n$product->save();\r\n```\r\n\r\nUse `save()` method to store model data in Elasticsearch. Let's see how this looks in Elasticsearch:\r\n\r\n```json\r\n{\r\n   \"_index\": \"test\",\r\n   \"_type\": \"test\",\r\n   \"_id\": \"1\",\r\n   \"_version\": 1,\r\n   \"found\": true,\r\n   \"_source\": {\r\n      \"name\": \"Product 1\",\r\n      \"price\": 10,\r\n      \"id\": 1,\r\n      \"user_id\": null,\r\n      \"created_at\": \"2016-06-03 08:11:08\",\r\n      \"updated_at\": \"2016-06-03 08:11:08\"\r\n   }\r\n}\r\n```\r\n\r\nFields `created_at` and `updated_at` were created automatically. The `user_id` field is persistent field to store user id.\r\n\r\n### Find existing model\r\n\r\n```php\r\n$product = Product::find(1);\r\n```\r\n\r\nIf you have big data in Elasticsearch you can specify certain fields to retrieve:\r\n\r\n```php\r\n$product = Product::find(1, ['name']);\r\n```\r\n\r\nIn this case the `price` field equals `0` because it's populated as the default value that you specified in the model.\r\n\r\nThere are the following methods:\r\n* `findOrFail()` returns `ModelNotFoundException` exception if no result found.\r\n* `findOrNew()` returns a new model if no result found.\r\n\r\n### Model cache\r\n\r\nThere is a smart model cache when you use methods like `find()`, `findOrFail()` and so on.\r\n\r\n```php\r\n$product = Product::find(1, ['name']);  // will be retrieved from the elasticsearch\r\n$product = Product::find(1, ['name']);  // will be retrieved from the cache\r\n$product = Product::find(1, ['price']); // elasticsearch\r\n$product = Product::find(1, ['price']); // cache\r\n$product = Product::find(1, ['name']);  // cache\r\n```\r\n\r\n```php\r\n$product = Product::findOrFail(1);      // elasticsearch\r\n$product = Product::find(1);            // cache\r\n$product = Product::find(1, ['name']);  // cache\r\n$product = Product::find(1, ['price']); // cache\r\n```\r\n\r\n### Partial update\r\n\r\nYou can use partial update to update specific fields quickly.\r\n\r\n```php\r\n$product = Product::find(1, ['name']);\r\n$product->name = 'Product 3';\r\n$product->save('name');\r\n```\r\n\r\n### Delete models\r\n\r\n```php\r\n$product = Product::find(1);\r\n$product->delete();\r\n```\r\n\r\nYou can use the static method:\r\n\r\n```php\r\nProduct::destroy(1);\r\n```\r\n\r\n### Basic search\r\n\r\nThere are helpers to search documents:\r\n* `first($query)` returns the first document according to the query or `null`.\r\n* `firstOrFail($query)` returns `ModelNotFoundException` exception if `first($query)` returns `null`.\r\n* `search($query)` returns documents (default 50 items) according to the query.\r\n* `map($query, callable $callback)` returns all documents (default 50 items per request) according to the query.\r\n* `all($query)` returns all documents according to the query.\r\n\r\nIf `$query` is not passed the query will be as `match_all` query.\r\n\r\n### Query Builder\r\n\r\n```php\r\nuse Isswp101\\Persimmon\\QueryBuilder\\QueryBuilder;\r\n\r\n$query = new QueryBuilder();\r\n```\r\n\r\nSimple usage:\r\n\r\n```php\r\n$query = new QueryBuilder(['query' => ['match' => ['name' => 'Product']]]);\r\n$products = Product::search($query);\r\n```\r\n\r\nThe `match` query:\r\n\r\n```php\r\n$query = new QueryBuilder();\r\n$query->match('name', 'Product');\r\n$products = Product::search($query);    \r\n```\r\n\r\nThe `range` query:\r\n\r\n```php\r\n$query = new QueryBuilder();\r\n$query->betweenOrEquals('price', 20, 30)->greaterThan('price', 15);\r\n$products = Product::search($query);\r\n```\r\n\r\nThe `TermFilter` filter:\r\n\r\n```php\r\n$query = new QueryBuilder();\r\n$query->filter(new TermFilter('name', '2'));\r\n$products = Product::search($query);\r\n```\r\n\r\nThe `IdsFilter` filter:\r\n\r\n```php\r\n$query = new QueryBuilder();\r\n$query->filter(new IdsFilter([1, 3]));\r\n$products = Product::search($query);\r\n```\r\n\r\n**TO BE CONTINUED...**\r\n\r\n@TODO:\r\n* Add parent child relationship\r\n* Add aggregations\r\n* Add `RangeOrExistFilter` filter\r\n\r\n## Change log\r\n\r\nPlease see [CHANGELOG](CHANGELOG.md) for more information what has changed recently.\r\n\r\n## Testing\r\n\r\n``` bash\r\n$ composer test\r\n```\r\n\r\n## Contributing\r\n\r\nPlease see [CONTRIBUTING](CONTRIBUTING.md) and [CONDUCT](CONDUCT.md) for details.\r\n\r\n## Security\r\n\r\nIf you discover any security related issues, please email isswp101@gmail.com instead of using the issue tracker.\r\n\r\n## Credits\r\n\r\n- [Sergey Sorokin][link-author]\r\n- [All Contributors][link-contributors]\r\n\r\n## License\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE.md) for more information.\r\n\r\n[ico-version]: https://img.shields.io/packagist/v/isswp101/elasticsearch-eloquent.svg?style=flat-square\r\n[ico-license]: https://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat-square\r\n[ico-travis]: https://img.shields.io/travis/isswp101/elasticsearch-eloquent/master.svg?style=flat-square\r\n[ico-scrutinizer]: https://img.shields.io/scrutinizer/coverage/g/isswp101/elasticsearch-eloquent.svg?style=flat-square\r\n[ico-code-quality]: https://img.shields.io/scrutinizer/g/isswp101/elasticsearch-eloquent.svg?style=flat-square\r\n[ico-downloads]: https://img.shields.io/packagist/dt/isswp101/elasticsearch-eloquent.svg?style=flat-square\r\n\r\n[link-packagist]: https://packagist.org/packages/isswp101/elasticsearch-eloquent\r\n[link-travis]: https://travis-ci.org/isswp101/elasticsearch-eloquent\r\n[link-scrutinizer]: https://scrutinizer-ci.com/g/isswp101/elasticsearch-eloquent/code-structure\r\n[link-code-quality]: https://scrutinizer-ci.com/g/isswp101/elasticsearch-eloquent\r\n[link-downloads]: https://packagist.org/packages/isswp101/elasticsearch-eloquent\r\n[link-author]: https://github.com/isswp101\r\n[link-contributors]: ../../contributors\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}